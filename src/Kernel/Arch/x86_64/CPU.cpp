#include "CPU.h"
#include "GDT.h"

#include "Libraries/libc/stdio.h"

namespace BartOS
{

inline namespace x86_64
{

namespace CPU
{

RFLAGS GetRFLAGS()
{
    uint64_t rflags;
    RFLAGS actualRFLAGS;
    __asm__ __volatile__ ("pushf;"
                          "pop %%rax;" 
                          "mov %%rax, %[rflags];"
                          : [rflags] "=r" (rflags)
                          :
                          : "rax");

    actualRFLAGS.Set(rflags);
    return actualRFLAGS;
}

// ---------------------------------------------------------------------------------------------------------

void SetRFLAGS(const RFLAGS rflags)
{
    const RFLAGS::Type value = rflags.Get();
    __asm__ __volatile__ ("mov %[rflags], %%rax;"
                          "push %%rax;" 
                          "popf;" 
                          :
                          : [rflags] "q" (value)
                          : "rax", "memory");
}

// ---------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------

CR0 GetCR0()
{
    CR0::Type value;
    __asm__ __volatile__ (
    "mov %%cr0, %[value]"
    : [value] "=q" (value));

    CR0 cr0;
    cr0.Set(value);
    return cr0;
}

// ---------------------------------------------------------------------------------------------------------

void SetCR0(const CR0 cr0)
{
    const CR0::Type value = cr0.Get();
    __asm__ __volatile__ (
    "mov %[Data], %%cr0"
    :
    : [Data] "q" (value)
    : "memory");
}

// ---------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------

CR3 GetCR3()
{
    CR3::Type value;
    __asm__ __volatile__ (
    "mov %%cr3, %[value]"
    : [value] "=q" (value));

    CR3 cr3;
    cr3.Set(value);
    return cr3;
}

// ---------------------------------------------------------------------------------------------------------

void SetCR3(const CR3 cr3)
{
    const CR3::Type value = cr3.Get();
    __asm__ __volatile__ (
    "mov %[Data], %%cr3"
    :
    : [Data] "q" (value)
    : "memory");
}

// ---------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------

CR4 GetCR4()
{
    CR4::Type value;
    __asm__ __volatile__ (
    "mov %%cr4, %[value]"
    : [value] "=q" (value));

    CR4 cr4;
    cr4.Set(value);
    return cr4;
}

// ---------------------------------------------------------------------------------------------------------

void SetCR4(const CR4 cr4)
{
    const CR4::Type value = cr4.Get();
    __asm__ __volatile__ (
    "mov %[Data], %%cr4"
    :
    : [Data] "q" (value)
    : "memory");
}

// ---------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------

uint64_t GetMSR(const uint32_t msrId)
{

}

// ---------------------------------------------------------------------------------------------------------

void SetEFER(const uint32_t msrId, const uint64_t value)
{

}

// ---------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------


InterruptDisabler::InterruptDisabler()
{
    Cli();
}

// ---------------------------------------------------------------------------------------------------------

InterruptDisabler::~InterruptDisabler()
{
    Sti();
}

// ---------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------

void Cli()
{
    asm __volatile__("cli");
}

// ---------------------------------------------------------------------------------------------------------

void Sti()
{
    asm __volatile__("sti");
}

// ---------------------------------------------------------------------------------------------------------

void Hlt()
{
    asm __volatile__("hlt");
}

// ---------------------------------------------------------------------------------------------------------

void Invlpg(const uintptr_t virtualAddress)
{
    __asm__ __volatile__("invlpg (%%eax)" : : "a" (virtualAddress));
}

// ---------------------------------------------------------------------------------------------------------

void Invlpg(const VirtualAddress virtualAddress)
{
    Invlpg(virtualAddress.Get());
}

} // namespace CPU

} // namespace x86

} // namespace BartOS
